generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AuthStatus {
  PENDING
  SENT
  CONFIRMED
  CANCELLED
}

enum VideoOwner {
  USER
  TRAINER
}

enum VideoFormat {
  MP4
  MOV
  AVI
  FLV
  WMV
  MKV
  WEBM
}

enum SetType {
  DEFAULT
  USER_HISTORY
  TRAINER
  TRAINER_HISTORY
}

model User {
  id            String   @id @default(uuid())
  firstName     String   @default("")
  lastName      String   @default("")
  email         String   @unique
  phone         String?
  uniquePhoneId String?  @unique
  imgUrl        String?
  createdAt     DateTime @default(now())
  tokens        Token[]
  trainer       Trainer?
  trainee       Trainee?
}

model Trainee {
  id             String              @id @default(uuid())
  userId         String?             @unique
  user           User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  programs       Program[]
  trainings      TrainingToTrainee[]
  trainerId      String?
  trainer        Trainer?            @relation(fields: [trainerId], references: [id])
  traineeMetrics TraineeMetrics[]
}

model TraineeMetrics {
  id                    String   @id @default(uuid())
  traineeId             String
  trainee               Trainee  @relation(fields: [traineeId], references: [id], onDelete: Cascade)
  heartRate             Int?
  weight                Float?
  height                Float?
  age                   Float?
  bloodPressureSystole  Int?
  bloodPressureDiastole Int?
  date                  DateTime @default(now())
}

model Token {
  id        String     @id @default(uuid())
  token     String     @unique
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  status    AuthStatus @default(PENDING)
}

model Trainer {
  id       String    @id @default(uuid())
  userId   String?   @unique
  user     User?     @relation(fields: [userId], references: [id])
  trainees Trainee[]
  programs Program[]
}

model Program {
  id        String              @id @default(uuid())
  name      String              @default("Program")
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
  days      DaysOfWeek[]
  trainings TrainingToTrainee[]
  traineeId String?
  trainee   Trainee?            @relation(fields: [traineeId], references: [id])
  trainerId String?
  trainer   Trainer?            @relation(fields: [trainerId], references: [id])
}

model Training {
  id                  String              @id @default(uuid())
  set                 Int                 @default(1)
  name                String
  defaultSets         Set[]
  trainingAssignments TrainingToTrainee[]
}

model Set {
  id            String             @id @default(uuid())
  reps          Int
  weight        Int
  rest          Int
  setType       SetType
  trainingId    String?
  training      Training?          @relation(fields: [trainingId], references: [id])
  traineeSetsId String?
  traineeSets   TrainingToTrainee? @relation(fields: [traineeSetsId], references: [id], name: "traineeSets") //Trainee completed sets include history during program
  trainerSetsId String?
  trainerSets   TrainingToTrainee? @relation(fields: [trainerSetsId], references: [id], name: "trainerSets") //Trainer assigned sets include history during program
}

model Video {
  id                        String             @id @default(uuid())
  duration                  Int
  height                    Int
  width                     Int
  playbackUrl               String //Optimize URL from cloudinary to use with SDK
  url                       String //Original URL from cloudinary
  assetId                   String //Cloudinary asset ID for cloud storage
  format                    VideoFormat
  videoOwner                VideoOwner         @default(TRAINER)
  trainerInstructionVideo   TrainingToTrainee? @relation(fields: [trainerInstructionVideoId], references: [id], name: "instructionVideos") //Trainer recorded instructions
  trainerInstructionVideoId String?
  traineeFeedbackVideo      TrainingToTrainee? @relation(fields: [traineeFeedbackVideoId], references: [id], name: "feedbackVideo") //Trainee recorded video for trainer feedback
  traineeFeedbackVideoId    String?
}

model TrainingToTrainee {
  id                String   @id @default(uuid())
  traineeSet        Int //How much the trainee completed
  trainerSet        Int //How much the trainer assigned
  trainingId        String   @unique
  training          Training @relation(fields: [trainingId], references: [id])
  programId         String?
  program           Program? @relation(fields: [programId], references: [id])
  traineeId         String
  trainee           Trainee  @relation(fields: [traineeId], references: [id])
  instructionVideos Video[]  @relation("instructionVideos") //Trainer recorded instructions
  feedbackVideos    Video[]  @relation("feedbackVideo") //Trainee recorded video for trainer feedback
  traineeSets       Set[]    @relation("traineeSets") //Trainee completed sets include history during program
  trainerSets       Set[]    @relation("trainerSets") //Trainer assigned sets include history during program
}
