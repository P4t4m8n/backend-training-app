generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY

  @@map("DAYS_OF_WEEK")
}

model User {
  id               String    @id @default(uuid())
  firstName        String    @default("")
  lastName         String    @default("")
  email            String    @unique
  phone            String    @unique
  trustedDeviceId  String    @unique
  phoneDeviceToken String    @unique
  isTrainer        Boolean   @default(false)
  trainer          Trainer?
  createdAt        DateTime  @default(now())
  programs         Program[]
}

model Trainer {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])
}

model Exercise {
  id                String              @id @default(uuid())
  name              String
  programToExercise ProgramToExercise[]
}

model Program {
  id               String              @id @default(uuid())
  days             DaysOfWeek[]
  startDate        DateTime
  endDate          DateTime
  programExercises ProgramToExercise[]
  userId           String
  user             User                @relation(fields: [userId], references: [id])
}

model ProgramToExercise {
  id         String   @id @default(uuid())
  videoUrl   String
  exerciseId String
  set        Int      @default(1)
  goalSets   Int      @default(1)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Sets[]
  programId  String
  Program    Program  @relation(fields: [programId], references: [id])
}

model Sets {
  id                  String            @id @default(uuid())
  reps                Int
  goalReps            Int
  weight              Int
  programToExercise   ProgramToExercise @relation(fields: [programToExerciseId], references: [id])
  programToExerciseId String
}
